{"version":3,"file":"static/js/54.162f94d0.chunk.js","mappings":"gJAEO,MAAMA,EAAyB,CACpC,CAACC,EAAAA,GAAkBC,MAAQC,IAAqCC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAAGH,IACnE,CAACF,EAAAA,GAAkBM,eAAiBJ,IAClCC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGH,EAAKK,MAAM,UAAUC,KAAI,CAACC,EAAcC,KACvCC,EAAAA,EAAAA,MAAAP,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,QAAMS,UAAqB,IAAVF,EAAc,OAAS,OAAOL,SAAEI,IAAa,WAKtE,CAACT,EAAAA,GAAkBa,iBAAmBX,IACpCC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGH,EAAKK,MAAM,gBAAgBC,KAAI,CAACC,EAAcC,IACvCA,EAAQ,GAKZC,EAAAA,EAAAA,MAAAP,EAAAA,SAAA,CAAAC,SAAA,CACGI,EAAKK,UAAU,EAAG,IACnBX,EAAAA,EAAAA,KAAA,QAAMS,UAAU,OAAMP,SAAEI,EAAKK,UAAU,QANlCL,OAcJM,EAA0B,CACrC,CAACC,EAAAA,GAAmBf,MAAO,CACzBgB,EACAC,IACGA,EAAMV,KAAKN,IAASC,EAAAA,EAAAA,KAAA,OAAAE,SAAMY,EAAsBf,OACrD,CAACc,EAAAA,GAAmBG,eAAgB,CAClCF,EACAC,IAEAA,EAAMV,KAAI,CAACN,EAAMQ,KACfP,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAMS,UAAqB,IAAVF,EAAc,OAAS,OAAOL,SAClC,IAAVK,EAAcO,EAAsBf,GAAQA,SC7B1CkB,EAAeC,IAGD,IAHE,OAC3BC,EAAM,oBACNC,GACMF,EACN,IAAKC,EACH,OACEnB,EAAAA,EAAAA,KAACqB,EAAAA,EAAI,CAAAnB,UACHF,EAAAA,EAAAA,KAACqB,EAAAA,EAAKC,KAAI,CAAApB,UACRF,EAAAA,EAAAA,KAACqB,EAAAA,EAAKE,KAAI,CAACd,UAAU,sBAAqBP,SAAC,kDAQnD,MAAM,kBAAEsB,EAAiB,mBAAEC,GAAuBL,EAElD,OACEpB,EAAAA,EAAAA,KAACqB,EAAAA,EAAI,CAAAnB,UACHF,EAAAA,EAAAA,KAACqB,EAAAA,EAAKC,KAAI,CAAApB,UACRF,EAAAA,EAAAA,KAACqB,EAAAA,EAAKE,KAAI,CAACd,UAAU,sBAAqBP,SACvCiB,EAAOd,KAAI,CAACU,EAAOR,KAEhBP,EAAAA,EAAAA,KAAA,KAAAE,SACGU,EAAwBa,GACvB7B,EAAuB4B,GACvBT,IAHIR,UAUX,C,gDC9CJ,MAAMmB,EAAkBA,CAC7BC,EACAC,KAEA,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,WAAe,KACvC,IACE,MAAMC,EAAcC,aAAaC,QAAQP,GAEzC,GAAIK,EACF,OAAOG,KAAKC,MAAMJ,EAEtB,CAAE,MAAOK,GACPJ,aAAaK,WAAWX,GACxBY,QAAQC,MAAMH,EAChB,CAEA,OAAOT,CAAY,IAiBrB,MAAO,CAACC,EAdkBY,IACxB,IACmB,OAAbA,GAAyC,qBAAbA,EAC9BR,aAAaK,WAAWX,GAExBM,aAAaS,QAAQf,EAAKQ,KAAKQ,UAAUF,IAG3CX,EAASW,EACX,CAAE,MAAOJ,GACPE,QAAQC,MAAMH,EAChB,GAG8B,C,2GCzB3B,MAkBMO,EAA0B1B,IAGZ,IAHa,uBACtC2B,EAAsB,oBACtBzB,GACMF,EACN,MAAM,kBAAEM,EAAiB,mBAAEC,GAAuBL,EAOlD,OACEZ,EAAAA,EAAAA,MAAAP,EAAAA,SAAA,CAAAC,SAAA,EACEM,EAAAA,EAAAA,MAACsC,EAAAA,EAAiB,CAChBC,KAAK,YACLC,KAAK,QACLnB,MAAOL,EACPyB,SAX2BzB,GAC/BqB,EAAuB,IAAKzB,EAAqBI,sBAUXtB,SAAA,EAElCF,EAAAA,EAAAA,KAACkD,EAAAA,EAAY,CACXrB,MAAOhC,EAAAA,GAAkBC,KACzBqD,GAAG,YACHC,QAAQ,YAAWlD,SACpB,eAGDF,EAAAA,EAAAA,KAACkD,EAAAA,EAAY,CACXrB,MAAOhC,EAAAA,GAAkBa,gBACzByC,GAAG,eACHC,QAAQ,YAAWlD,SACpB,uBAGDF,EAAAA,EAAAA,KAACkD,EAAAA,EAAY,CACXrB,MAAOhC,EAAAA,GAAkBM,cACzBgD,GAAG,aACHC,QAAQ,YAAWlD,SACpB,wBAIHM,EAAAA,EAAAA,MAACsC,EAAAA,EAAiB,CAChBC,KAAK,aACLC,KAAK,QACLnB,MAAOJ,EACPwB,SArC4BxB,GAChCoB,EAAuB,IAAKzB,EAAqBK,uBAoCVvB,SAAA,EAEnCF,EAAAA,EAAAA,KAACkD,EAAAA,EAAY,CACXrB,MAAOhB,EAAAA,GAAmBf,KAC1BqD,GAAG,cACHC,QAAQ,YAAWlD,SACpB,gBAGDF,EAAAA,EAAAA,KAACkD,EAAAA,EAAY,CACXrB,MAAOhB,EAAAA,GAAmBG,cAC1BmC,GAAG,aACHC,QAAQ,YAAWlD,SACpB,yBAIF,E,sDC/EP,MAAMmD,EAA0B,qBAC1BC,EAAyB,aAE/B,OACE,MAAOC,EAASC,IAAc9B,EAAAA,EAAAA,GAAgB,WAAY,KACnD+B,EAAMC,IAAW3B,EAAAA,EAAAA,UAA4B,OAC7CX,EAAqByB,GDPQc,MAIpC,MAAOvC,EAAqByB,IAC1Bd,EAAAA,EAAAA,UAA8B,CAC5BP,kBAAmB3B,EAAAA,GAAkBC,KACrC2B,mBAAoBZ,EAAAA,GAAmBf,OAG3C,MAAO,CAACsB,EAAqByB,EAAuB,ECFlDc,GASF,OACEnD,EAAAA,EAAAA,MAAAP,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAC4D,EAAAA,EAAM,CAACnD,UAAU,mBAAkBP,UAClCF,EAAAA,EAAAA,KAAC6D,EAAAA,EAAS,CAACpD,UAAU,cAAaP,UAChCF,EAAAA,EAAAA,KAAC4C,EAAuB,CACtBxB,oBAAqBA,EACrByB,uBAAwBA,SAI5BY,IACAjD,EAAAA,EAAAA,MAACqD,EAAAA,EAAS,CAAA3D,SAAA,EACRF,EAAAA,EAAAA,KAAC8D,EAAAA,EAAKC,QAAO,CACXC,GAAG,WACHvD,UAAU,aACVoB,MAAO0B,EACPN,SAAWZ,GAAMmB,EAAWS,OAAO5B,EAAE6B,OAAOrC,QAC5CsC,KAAM,MAERnE,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CAACpB,KAAK,SAASqB,QA1BNC,IACtBZ,EACEH,EACGnD,MAAMiD,GACNhD,KAAKkE,GAAUA,EAAMnE,MAAMkD,MAsBqBpD,SAAC,cAKnDuD,IACCjD,EAAAA,EAAAA,MAACqD,EAAAA,EAAS,CAAA3D,SAAA,EACRF,EAAAA,EAAAA,KAACiB,EAAAA,EAAY,CACXE,OAAQsC,EACRrC,oBAAqBA,KAEvBpB,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CAACpB,KAAK,SAASvC,UAAU,OAAO4D,QAASA,IAAMX,EAAQ,MAAMxD,SAAC,eAO9E,C,qDC3DM,IAAKL,EAAiB,SAAjBA,GAAiB,OAAjBA,EAAAA,EAAiB,eAAjBA,EAAAA,EAAiB,qCAAjBA,EAAAA,EAAiB,iCAAjBA,CAAiB,MAKjBgB,EAAkB,SAAlBA,GAAkB,OAAlBA,EAAAA,EAAkB,eAAlBA,EAAAA,EAAkB,iCAAlBA,CAAkB,MAYlB2D,EAAO,SAAPA,GAAO,OAAPA,EAAO,kBAAPA,EAAO,kBAAPA,EAAO,oBAAPA,EAAO,YAAPA,CAAO,K","sources":["TransformFunctions.tsx","components/LyricsOutput.tsx","hooks/useLocalStorage.ts","components/LyricsTransformSelector.tsx","routes/TextInputRoute.tsx","types.ts"],"sourcesContent":["import { LineTransformType, VerseTransformType } from \"./types\";\n\nexport const LineTransformFunctions = {\n  [LineTransformType.Full]: (line: string): React.ReactElement => <>{line}</>,\n  [LineTransformType.FirstWordOnly]: (line: string) => (\n    <>\n      {line.split(/\\s(.*)/).map((word: string, index: number) => (\n        <>\n          <span className={index === 0 ? \"show\" : \"hide\"}>{word}</span>{\" \"}\n        </>\n      ))}\n    </>\n  ),\n  [LineTransformType.FirstLetterOnly]: (line: string) => (\n    <>\n      {line.split(/([a-zA-Z']+)/).map((word: string, index: number) => {\n        if (!(index % 2)) {\n          return word;\n        }\n\n        return (\n          <>\n            {word.substring(0, 1)}\n            <span className=\"hide\">{word.substring(1)}</span>\n          </>\n        );\n      })}\n    </>\n  ),\n};\n\nexport const VerseTransformFunctions = {\n  [VerseTransformType.Full]: (\n    lineTransformFunction: (line: string) => React.ReactElement,\n    verse: string[]\n  ) => verse.map((line) => <div>{lineTransformFunction(line)}</div>),\n  [VerseTransformType.FirstLineOnly]: (\n    lineTransformFunction: (line: string) => React.ReactElement,\n    verse: string[]\n  ) =>\n    verse.map((line, index) => (\n      <div>\n        <span className={index === 0 ? \"show\" : \"hide\"}>\n          {index === 0 ? lineTransformFunction(line) : line}\n        </span>\n      </div>\n    )),\n};\n","import { Card } from \"react-bootstrap\";\n\nimport { Lyrics, LyricsTransformType } from \"../types\";\n\nimport {\n  VerseTransformFunctions,\n  LineTransformFunctions,\n} from \"../TransformFunctions\";\n\ntype Props = {\n  lyrics: Lyrics | null;\n  lyricsTransformType: LyricsTransformType;\n};\n\nexport const LyricsOutput = ({\n  lyrics,\n  lyricsTransformType,\n}: Props): JSX.Element => {\n  if (!lyrics) {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Text className=\"serifed text-center\">\n            Lyrics not yet provided for this section.\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  const { lineTransformType, verseTransformType } = lyricsTransformType;\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Text className=\"serifed text-center\">\n          {lyrics.map((verse, index) => {\n            return (\n              <p key={index}>\n                {VerseTransformFunctions[verseTransformType](\n                  LineTransformFunctions[lineTransformType],\n                  verse\n                )}\n              </p>\n            );\n          })}\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n","import { useState } from \"react\";\n\nexport const useLocalStorage = <Type>(\n  key: string,\n  initialValue: Type\n): [Type, (newValue: Type) => void] => {\n  const [value, setValue] = useState<Type>(() => {\n    try {\n      const storedValue = localStorage.getItem(key);\n\n      if (storedValue) {\n        return JSON.parse(storedValue) as Type;\n      }\n    } catch (e) {\n      localStorage.deleteItem(key);\n      console.error(e);\n    }\n\n    return initialValue;\n  });\n\n  const storeAndSetValue = (newValue: Type): void => {\n    try {\n      if (newValue === null || typeof newValue === \"undefined\") {\n        localStorage.deleteItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(newValue));\n      }\n\n      setValue(newValue);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return [value, storeAndSetValue];\n};\n","import ToggleButton from \"react-bootstrap/ToggleButton\";\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\n\nimport {\n  LyricsTransformType,\n  LineTransformType,\n  VerseTransformType,\n} from \"../types\";\nimport { useState } from \"react\";\n\nexport const useLyricsTransformType = (): [\n  LyricsTransformType,\n  (t: LyricsTransformType) => void\n] => {\n  const [lyricsTransformType, setLyricsTransformType] =\n    useState<LyricsTransformType>({\n      lineTransformType: LineTransformType.Full,\n      verseTransformType: VerseTransformType.Full,\n    });\n\n  return [lyricsTransformType, setLyricsTransformType];\n};\n\ntype Props = {\n  setLyricsTransformType: (t: LyricsTransformType) => void;\n  lyricsTransformType: LyricsTransformType;\n};\n\nexport const LyricsTransformSelector = ({\n  setLyricsTransformType,\n  lyricsTransformType,\n}: Props): JSX.Element => {\n  const { lineTransformType, verseTransformType } = lyricsTransformType;\n\n  const updateLineTransformType = (lineTransformType: LineTransformType) =>\n    setLyricsTransformType({ ...lyricsTransformType, lineTransformType });\n  const updateVerseTransformType = (verseTransformType: VerseTransformType) =>\n    setLyricsTransformType({ ...lyricsTransformType, verseTransformType });\n\n  return (\n    <>\n      <ToggleButtonGroup\n        name=\"line-type\"\n        type=\"radio\"\n        value={lineTransformType}\n        onChange={updateLineTransformType}\n      >\n        <ToggleButton\n          value={LineTransformType.Full}\n          id=\"full-line\"\n          variant=\"secondary\"\n        >\n          Full Line\n        </ToggleButton>\n        <ToggleButton\n          value={LineTransformType.FirstLetterOnly}\n          id=\"first-letter\"\n          variant=\"secondary\"\n        >\n          First Letter Only\n        </ToggleButton>\n        <ToggleButton\n          value={LineTransformType.FirstWordOnly}\n          id=\"first-word\"\n          variant=\"secondary\"\n        >\n          First Word Only\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <ToggleButtonGroup\n        name=\"verse-type\"\n        type=\"radio\"\n        value={verseTransformType}\n        onChange={updateVerseTransformType}\n      >\n        <ToggleButton\n          value={VerseTransformType.Full}\n          id=\"full-verese\"\n          variant=\"secondary\"\n        >\n          Full Verse\n        </ToggleButton>\n        <ToggleButton\n          value={VerseTransformType.FirstLineOnly}\n          id=\"first-line\"\n          variant=\"secondary\"\n        >\n          First Line Only\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </>\n  );\n};\n","import { useState } from \"react\";\n\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\n\nimport {\n  LyricsTransformSelector,\n  useLyricsTransformType,\n} from \"../components/LyricsTransformSelector\";\nimport { LyricsOutput } from \"../components/LyricsOutput\";\nimport { Button, Container, Navbar, Form } from \"react-bootstrap\";\n\nconst VERSE_SEPERATOR_PATTERN = /\\r\\n\\r\\n|\\r\\r|\\n\\n/;\nconst LINE_SEPERATOR_PATTERN = /\\r\\n|\\r|\\n/;\n\nexport default (): JSX.Element => {\n  const [rawText, setRawText] = useLocalStorage(\"raw-text\", \"\");\n  const [song, setSong] = useState<string[][] | null>(null);\n  const [lyricsTransformType, setLyricsTransformType] =\n    useLyricsTransformType();\n\n  const parseAndSetSong = () =>\n    setSong(\n      rawText\n        .split(VERSE_SEPERATOR_PATTERN)\n        .map((chunk) => chunk.split(LINE_SEPERATOR_PATTERN))\n    );\n\n  return (\n    <>\n      <Navbar className=\"bg-body-tertiart\">\n        <Container className=\"control-bar\">\n          <LyricsTransformSelector\n            lyricsTransformType={lyricsTransformType}\n            setLyricsTransformType={setLyricsTransformType}\n          />\n        </Container>\n      </Navbar>\n      {!song && (\n        <Container>\n          <Form.Control\n            as=\"textarea\"\n            className=\"w-100 mb-3\"\n            value={rawText}\n            onChange={(e) => setRawText(String(e.target.value))}\n            rows={30}\n          />\n          <Button type=\"submit\" onClick={parseAndSetSong}>\n            Submit\n          </Button>\n        </Container>\n      )}\n      {song && (\n        <Container>\n          <LyricsOutput\n            lyrics={song}\n            lyricsTransformType={lyricsTransformType}\n          />\n          <Button type=\"submit\" className=\"mt-3\" onClick={() => setSong(null)}>\n            Reset\n          </Button>\n        </Container>\n      )}\n    </>\n  );\n};\n","export type LyricsTransformType = {\n  lineTransformType: LineTransformType;\n  verseTransformType: VerseTransformType;\n};\n\nexport enum LineTransformType {\n  Full,\n  FirstLetterOnly,\n  FirstWordOnly,\n}\nexport enum VerseTransformType {\n  Full,\n  FirstLineOnly,\n}\nexport type Lyrics = string[][];\n\nexport type Song = {\n  title: string;\n  lyrics: { [section in Section]?: Lyrics };\n  loungeLink: string;\n};\n\nexport enum Section {\n  Tenor_1 = \"Tenor_1\",\n  Tenor_2 = \"Tenor_2\",\n  Baritone = \"Baritone\",\n  Bass = \"Bass\",\n}\n"],"names":["LineTransformFunctions","LineTransformType","Full","line","_jsx","_Fragment","children","FirstWordOnly","split","map","word","index","_jsxs","className","FirstLetterOnly","substring","VerseTransformFunctions","VerseTransformType","lineTransformFunction","verse","FirstLineOnly","LyricsOutput","_ref","lyrics","lyricsTransformType","Card","Body","Text","lineTransformType","verseTransformType","useLocalStorage","key","initialValue","value","setValue","useState","storedValue","localStorage","getItem","JSON","parse","e","deleteItem","console","error","newValue","setItem","stringify","LyricsTransformSelector","setLyricsTransformType","ToggleButtonGroup","name","type","onChange","ToggleButton","id","variant","VERSE_SEPERATOR_PATTERN","LINE_SEPERATOR_PATTERN","rawText","setRawText","song","setSong","useLyricsTransformType","Navbar","Container","Form","Control","as","String","target","rows","Button","onClick","parseAndSetSong","chunk","Section"],"sourceRoot":""}
{"version":3,"file":"static/js/804.5cfa28d2.chunk.js","mappings":"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","sources":["TransformFunctions.tsx","components/LyricsOutput.tsx","hooks/useLocalStorage.ts","components/PartAndSongSelector.tsx","components/LineTransformSelector.tsx","components/VerseTransformSelector.tsx","routes/BgmcRoute.tsx","hooks/useLyricsTransformType.ts","types.ts"],"sourcesContent":["import { LineTransformType, VerseTransformType } from \"./types\";\n\nexport const LineTransformFunctions = {\n  [LineTransformType.Full]: (line: string): React.ReactElement => <>{line}</>,\n  [LineTransformType.FirstWordOnly]: (line: string) => (\n    <>\n      {line.split(/\\s(.*)/).map((word: string, index: number) => (\n        <>\n          <span className={index === 0 ? \"show\" : \"hide\"}>{word}</span>{\" \"}\n        </>\n      ))}\n    </>\n  ),\n  [LineTransformType.FirstLetterOnly]: (line: string) => (\n    <>\n      {line.split(/([a-zA-Z']+)/).map((word: string, index: number) => {\n        if (!(index % 2)) {\n          return word;\n        }\n\n        return (\n          <>\n            {word.substring(0, 1)}\n            <span className=\"hide\">{word.substring(1)}</span>\n          </>\n        );\n      })}\n    </>\n  ),\n};\n\nexport const VerseTransformFunctions = {\n  [VerseTransformType.Full]: (\n    lineTransformFunction: (line: string) => React.ReactElement,\n    verse: string[]\n  ) => verse.map((line) => <div>{lineTransformFunction(line)}</div>),\n  [VerseTransformType.FirstLineOnly]: (\n    lineTransformFunction: (line: string) => React.ReactElement,\n    verse: string[]\n  ) =>\n    verse.map((line, index) => (\n      <div>\n        <span className={index === 0 ? \"show\" : \"hide\"}>\n          {index === 0 ? lineTransformFunction(line) : line}\n        </span>\n      </div>\n    )),\n};\n","import { Card } from \"react-bootstrap\";\n\nimport { Lyrics, LyricsTransformType } from \"../types\";\n\nimport {\n  VerseTransformFunctions,\n  LineTransformFunctions,\n} from \"../TransformFunctions\";\n\ntype Props = {\n  lyrics: Lyrics | null;\n  lyricsTransformType: LyricsTransformType;\n};\n\nexport const LyricsOutput = ({\n  lyrics,\n  lyricsTransformType,\n}: Props): JSX.Element => {\n  if (!lyrics) {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Text className=\"serifed text-center\">\n            Lyrics not yet provided for this section.\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  const { lineTransformType, verseTransformType } = lyricsTransformType;\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Text className=\"serifed text-center\">\n          {lyrics.map((verse, index) => {\n            return (\n              <p key={index}>\n                {VerseTransformFunctions[verseTransformType](\n                  LineTransformFunctions[lineTransformType],\n                  verse\n                )}\n              </p>\n            );\n          })}\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n","import { useState } from \"react\";\n\nexport const useLocalStorage = <Type>(\n  key: string,\n  initialValue: Type\n): [Type, (newValue: Type) => void] => {\n  const [value, setValue] = useState<Type>(() => {\n    try {\n      const storedValue = localStorage.getItem(key);\n\n      if (storedValue) {\n        return JSON.parse(storedValue) as Type;\n      }\n    } catch (e) {\n      localStorage.deleteItem(key);\n      console.error(e);\n    }\n\n    return initialValue;\n  });\n\n  const storeAndSetValue = (newValue: Type): void => {\n    try {\n      if (newValue === null || typeof newValue === \"undefined\") {\n        localStorage.deleteItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(newValue));\n      }\n\n      setValue(newValue);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return [value, storeAndSetValue];\n};\n","import Dropdown from \"react-bootstrap/Dropdown\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\n\nimport { Section, Song } from \"../types\";\nimport data from \"../data.json\";\n\nconst songs = data.sort((a: Song, b: Song) => a.title.localeCompare(b.title));\n\nconst SectionStrings = {\n  Tenor_1: \"Tenor 1\",\n  Tenor_2: \"Tenor 2\",\n  Baritone: \"Baritone\",\n  Bass: \"Bass\",\n};\n\nexport const PartAndSongSelector = ({\n  section,\n  song,\n  setSong,\n  setSection,\n}: {\n  section: Section | null;\n  song: Song | null;\n  setSong: (song: Song | null) => void;\n  setSection: (section: Section) => void;\n}): JSX.Element => {\n  return (\n    <ButtonGroup className=\"w-100\">\n      <DropdownButton\n        as={ButtonGroup}\n        title={section ? SectionStrings[section] : \"Select Section\"}\n        className=\"col-6\"\n      >\n        <Dropdown.Item onClick={() => setSection(Section.Tenor_1)}>\n          Tenor 1\n        </Dropdown.Item>\n        <Dropdown.Item onClick={() => setSection(Section.Tenor_2)}>\n          Tenor 2\n        </Dropdown.Item>\n        <Dropdown.Item onClick={() => setSection(Section.Baritone)}>\n          Baritone\n        </Dropdown.Item>\n        <Dropdown.Item onClick={() => setSection(Section.Bass)}>\n          Bass\n        </Dropdown.Item>\n      </DropdownButton>\n      <Dropdown as={ButtonGroup} className=\"col-6\">\n        <Dropdown.Toggle className=\"text-truncate\" disabled={!section}>\n          {song?.title ?? \"Select Song\"}\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {songs.map((song: Song) => (\n            <Dropdown.Item key={song.title} onClick={() => setSong(song)}>\n              {song.title}\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    </ButtonGroup>\n  );\n};\n","import ToggleButton from \"react-bootstrap/ToggleButton\";\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\n\nimport { LineTransformType } from \"../types\";\n\ntype Props = {\n  setLineTransformType: (t: LineTransformType) => void;\n  lineTransformType: LineTransformType;\n};\n\nexport const LineTransformSelector = ({\n  setLineTransformType,\n  lineTransformType,\n}: Props): JSX.Element => {\n  return (\n    <ToggleButtonGroup\n      name=\"line-type\"\n      type=\"radio\"\n      value={lineTransformType}\n      onChange={setLineTransformType}\n      className=\"w-100\"\n    >\n      <ToggleButton\n        value={LineTransformType.Full}\n        id=\"full-line\"\n        variant=\"secondary\"\n        className=\"col-4\"\n      >\n        Full Line\n      </ToggleButton>\n      <ToggleButton\n        value={LineTransformType.FirstLetterOnly}\n        id=\"first-letter\"\n        variant=\"secondary\"\n        className=\"col-4\"\n      >\n        First Letter\n      </ToggleButton>\n      <ToggleButton\n        value={LineTransformType.FirstWordOnly}\n        id=\"first-word\"\n        variant=\"secondary\"\n        className=\"col-4\"\n      >\n        First Word\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n","import ToggleButton from \"react-bootstrap/ToggleButton\";\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\n\nimport { VerseTransformType } from \"../types\";\n\ntype Props = {\n  setVerseTransformType: (t: VerseTransformType) => void;\n  verseTransformType: VerseTransformType;\n};\n\nexport const VerseTransformSelector = ({\n  setVerseTransformType,\n  verseTransformType,\n}: Props): JSX.Element => {\n  return (\n    <ToggleButtonGroup\n      name=\"verse-type\"\n      type=\"radio\"\n      value={verseTransformType}\n      onChange={setVerseTransformType}\n      className=\"w-100\"\n    >\n      <ToggleButton\n        value={VerseTransformType.Full}\n        id=\"full-verese\"\n        variant=\"secondary\"\n        className=\"col-6\"\n      >\n        Full Verse\n      </ToggleButton>\n      <ToggleButton\n        value={VerseTransformType.FirstLineOnly}\n        id=\"first-line\"\n        variant=\"secondary\"\n        className=\"col-6\"\n      >\n        First Line\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n","import { useState } from \"react\";\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\n\nimport { Section, Song } from \"../types\";\nimport { LyricsOutput } from \"../components/LyricsOutput\";\nimport { PartAndSongSelector } from \"../components/PartAndSongSelector\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nimport { useLyricsTransformType } from \"../hooks/useLyricsTransformType\";\nimport { LineTransformSelector } from \"../components/LineTransformSelector\";\nimport { VerseTransformSelector } from \"../components/VerseTransformSelector\";\n\nexport default (): JSX.Element => {\n  const [song, setSong] = useState<Song | null>(null);\n  const [section, setSection] = useLocalStorage<Section | null>(\n    \"section\",\n    null\n  );\n  const [lyricsTransformType, setLineTransformType, setVerseTransformType] =\n    useLyricsTransformType();\n\n  return (\n    <>\n      <div className=\"bg-body-tertiary\">\n        <Container>\n          <Row>\n            <Col xs={12} lg={4} className=\"mb-2\">\n              <PartAndSongSelector\n                section={section}\n                song={song}\n                setSong={setSong}\n                setSection={setSection}\n              />\n            </Col>\n            <Col xs={12} lg={4} className=\"mb-2\">\n              <LineTransformSelector\n                lineTransformType={lyricsTransformType.lineTransformType}\n                setLineTransformType={setLineTransformType}\n              />\n            </Col>\n            <Col xs={12} lg={4} className=\"mb-2\">\n              <VerseTransformSelector\n                verseTransformType={lyricsTransformType.verseTransformType}\n                setVerseTransformType={setVerseTransformType}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      {section && song && (\n        <Container className=\"info-bar mb-1\">\n          <Button\n            href={song.loungeLink}\n            variant=\"outline-secondary\"\n            size=\"sm\"\n            target=\"_blank\"\n          >\n            Lounge Link\n          </Button>\n          <LyricsOutput\n            lyrics={song.lyrics[section] ?? null}\n            lyricsTransformType={lyricsTransformType}\n          />\n        </Container>\n      )}\n    </>\n  );\n};\n","import {\n  LyricsTransformType,\n  LineTransformType,\n  VerseTransformType,\n} from \"../types\";\nimport { useState } from \"react\";\n\nexport const useLyricsTransformType = (): [\n  LyricsTransformType,\n  (t: LineTransformType) => void,\n  (t: VerseTransformType) => void\n] => {\n  const [lyricsTransformType, setLyricsTransformType] =\n    useState<LyricsTransformType>({\n      lineTransformType: LineTransformType.Full,\n      verseTransformType: VerseTransformType.Full,\n    });\n\n  const setLineTransformType = (lineTransformType: LineTransformType) =>\n    setLyricsTransformType({ ...lyricsTransformType, lineTransformType });\n  const setVerseTransformType = (verseTransformType: VerseTransformType) =>\n    setLyricsTransformType({ ...lyricsTransformType, verseTransformType });\n\n  return [lyricsTransformType, setLineTransformType, setVerseTransformType];\n};\n","export type LyricsTransformType = {\n  lineTransformType: LineTransformType;\n  verseTransformType: VerseTransformType;\n};\n\nexport enum LineTransformType {\n  Full,\n  FirstLetterOnly,\n  FirstWordOnly,\n}\nexport enum VerseTransformType {\n  Full,\n  FirstLineOnly,\n}\nexport type Lyrics = string[][];\n\nexport type Song = {\n  title: string;\n  lyrics: { [section in Section]?: Lyrics };\n  loungeLink: string;\n};\n\nexport enum Section {\n  Tenor_1 = \"Tenor_1\",\n  Tenor_2 = \"Tenor_2\",\n  Baritone = \"Baritone\",\n  Bass = \"Bass\",\n}\n"],"names":["LineTransformFunctions","LineTransformType","Full","line","_jsx","_Fragment","children","FirstWordOnly","split","map","word","index","_jsxs","className","FirstLetterOnly","substring","VerseTransformFunctions","VerseTransformType","lineTransformFunction","verse","FirstLineOnly","LyricsOutput","_ref","lyrics","lyricsTransformType","Card","Body","Text","lineTransformType","verseTransformType","useLocalStorage","key","initialValue","value","setValue","useState","storedValue","localStorage","getItem","JSON","parse","e","deleteItem","console","error","newValue","setItem","stringify","songs","data","sort","a","b","title","localeCompare","SectionStrings","Tenor_1","Tenor_2","Baritone","Bass","PartAndSongSelector","_song$title","section","song","setSong","setSection","ButtonGroup","DropdownButton","as","Dropdown","Item","onClick","Section","Toggle","disabled","Menu","LineTransformSelector","setLineTransformType","ToggleButtonGroup","name","type","onChange","ToggleButton","id","variant","VerseTransformSelector","setVerseTransformType","_song$lyrics$section","useLyricsTransformType","setLyricsTransformType","Container","Row","Col","xs","lg","Button","href","loungeLink","size","target"],"sourceRoot":""}